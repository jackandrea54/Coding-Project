//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TodoItems = newTodoItemsTable("public", "todo_items", "")

type todoItemsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Title     postgres.ColumnString
	Status    postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp
	UserID    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TodoItemsTable struct {
	todoItemsTable

	EXCLUDED todoItemsTable
}

// AS creates new TodoItemsTable with assigned alias
func (a TodoItemsTable) AS(alias string) *TodoItemsTable {
	return newTodoItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TodoItemsTable with assigned schema name
func (a TodoItemsTable) FromSchema(schemaName string) *TodoItemsTable {
	return newTodoItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TodoItemsTable with assigned table prefix
func (a TodoItemsTable) WithPrefix(prefix string) *TodoItemsTable {
	return newTodoItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TodoItemsTable with assigned table suffix
func (a TodoItemsTable) WithSuffix(suffix string) *TodoItemsTable {
	return newTodoItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTodoItemsTable(schemaName, tableName, alias string) *TodoItemsTable {
	return &TodoItemsTable{
		todoItemsTable: newTodoItemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newTodoItemsTableImpl("", "excluded", ""),
	}
}

func newTodoItemsTableImpl(schemaName, tableName, alias string) todoItemsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		TitleColumn     = postgres.StringColumn("title")
		StatusColumn    = postgres.IntegerColumn("status")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		allColumns      = postgres.ColumnList{IDColumn, TitleColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn, UserIDColumn}
		mutableColumns  = postgres.ColumnList{TitleColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn, UserIDColumn}
	)

	return todoItemsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Title:     TitleColumn,
		Status:    StatusColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		UserID:    UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
